server {
    listen 80;
    server_name localhost;
    
    # Disable access logs
    access_log off;
    
    # Only log critical errors
    error_log /var/log/nginx/error.log crit;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()";

    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Website backend routes
    location /health {
        proxy_pass http://app:${WEBSITE_PORT};
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # Extension backend routes (with /api prefix)
    location /api/ {
        proxy_pass http://app:${EXTENSION_PORT}/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        # No timeout for SSE streaming
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        proxy_buffering off;
        proxy_cache off;
        # SSE specific headers
        proxy_set_header Cache-Control 'no-cache';
        proxy_set_header X-Accel-Buffering 'no';
    }

    # Video files with special handling for byte-range requests
    location ~* \.(mp4|webm|ogg|ogv|mov)$ {
        root /usr/share/nginx/html;
        
        # Enable byte-range support
        add_header Accept-Ranges bytes;
        
        # Cache for 1 year
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # Disable gzip for videos (already compressed)
        gzip off;
        
        # Allow CORS for videos if needed
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
        
        # Buffer settings for better video streaming
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
    }

    # Static assets with caching (excluding videos)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        root /usr/share/nginx/html;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Special files that should be served directly
    location ~ ^/(robots\.txt|sitemap\.xml|CNAME)$ {
        root /usr/share/nginx/html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # Frontend routes - explicitly define valid SPA routes
    location = / {
        root /usr/share/nginx/html;
        try_files /index.html =404;
        
        # Security headers for frontend
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    location = /guide {
        root /usr/share/nginx/html;
        try_files /index.html =404;

        # Security headers for frontend
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # Catch all - return 404 for any other routes
    location / {
        return 404;
    }

    # Error pages
    error_page 404 /404.html;
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
        
        # For the 404 page, we serve index.html so React can handle it
        try_files /index.html =404;
    }
    
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}